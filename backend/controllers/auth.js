import User from "../models/User.js";
import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";
import dotenv from "dotenv";

dotenv.config();

// ==========================
// REGISTER USER
// ==========================
export const registerUser = async (req, res) => {
Â  const {
Â  Â  fullName,
Â  Â  email,
Â  Â  phoneNumber,
Â  Â  username,
Â  Â  password,
Â  Â  confirmPassword,
Â  Â  userType,
Â  } = req.body;

Â  try {
Â  Â  // 1. Check if all required fields are provided
Â  Â  if (
Â  Â  Â  !fullName ||
Â  Â  Â  !email ||
Â  Â  Â  !phoneNumber ||
Â  Â  Â  !username ||
Â  Â  Â  !password ||
Â  Â  Â  !confirmPassword ||
Â  Â  Â  !userType
Â  Â  ) {
Â  Â  Â  return res
Â  Â  Â  Â  .status(400)
Â  Â  Â  Â  .json({ success: false, msg: "Please fill in all required fields." });
Â  Â  }

Â  Â  // 2. Check if the username or email already exists
Â  Â  const existingUser = await User.findOne({ $or: [{ username }, { email }] });
Â  Â  if (existingUser) {
Â  Â  Â  return res
Â  Â  Â  Â  .status(400)
Â  Â  Â  Â  .json({
Â  Â  Â  Â  Â  success: false,
Â  Â  Â  Â  Â  msg: "User with this username or email already exists.",
Â  Â  Â  Â  });
Â  Â  }

Â  Â  // 3. Check if passwords match
Â  Â  if (password !== confirmPassword) {
Â  Â  Â  return res
Â  Â  Â  Â  .status(400)
Â  Â  Â  Â  .json({ success: false, msg: "Passwords do not match." });
Â  Â  }

Â  Â  // 4. Hash password
Â  Â  const hashedPassword = await bcrypt.hash(password, 10);

Â  Â  // 5. Create and save new user
Â  Â  const user = new User({
Â  Â  Â  fullName,
Â  Â  Â  email,
Â  Â  Â  phoneNumber,
Â  Â  Â  username,
Â  Â  Â  password: hashedPassword,
Â  Â  Â  userType,
Â  Â  });
Â  Â  await user.save();

Â  Â  // 6. Respond with registration success
Â  Â  res.status(201).json({
Â  Â  Â  success: true,
Â  Â  Â  msg: "ðŸŽ‰ Registration successful! You can now log in.",
Â  Â  });
Â  } catch (err) {
Â  Â  console.error("ERROR DETAILS:", err);
Â  Â  res
Â  Â  Â  .status(500)
Â  Â  Â  .json({ success: false, msg: "Server error. Please try again later." });
Â  }
};

// ==========================
// LOGIN USER
// ==========================
export const loginUser = async (req, res) => {
Â  const { username, password } = req.body;

Â  try {
Â  Â  // 1. Check if username and password are provided
Â  Â  if (!username || !password) {
Â  Â  Â  return res
Â  Â  Â  Â  .status(400)
Â  Â  Â  Â  .json({
Â  Â  Â  Â  Â  success: false,
Â  Â  Â  Â  Â  msg: "Please enter both username and password.",
Â  Â  Â  Â  });
Â  Â  }

Â  Â  // 2. Check if user exists
Â  Â  const user = await User.findOne({ username });
Â  Â  if (!user) {
Â  Â  Â  return res
Â  Â  Â  Â  .status(400)
Â  Â  Â  Â  .json({ success: false, msg: "Invalid username or password." });
Â  Â  }

Â  Â  // 3. Compare password
Â  Â  const isMatch = await bcrypt.compare(password, user.password);
Â  Â  if (!isMatch) {
Â  Â  Â  return res
Â  Â  Â  Â  .status(400)
Â  Â  Â  Â  .json({ success: false, msg: "Invalid username or password." });
Â  Â  }

Â  Â  // 4. Create JWT token
Â  Â  const payload = { user: { id: user.id, userType: user.userType } };
Â  Â  const token = jwt.sign(payload, process.env.JWT_SECRET, {
Â  Â  Â  expiresIn: "1h",
Â  Â  });

Â  Â  // 5. Send login success response
Â  Â  res.json({
Â  Â  Â  success: true,
Â  Â  Â  msg: `âœ… Login successful! Welcome back, ${user.fullName}.`,
Â  Â  Â  token,
Â  Â  Â  user: {
Â  Â  Â  Â  id: user.id,
Â  Â  Â  Â  fullName: user.fullName,
Â  Â  Â  Â  email: user.email,
Â  Â  Â  Â  phoneNumber: user.phoneNumber,
Â  Â  Â  Â  username: user.username,
Â  Â  Â  Â  userType: user.userType,
Â  Â  Â  },
Â  Â  });
Â  } catch (err) {
Â  Â  console.error("ERROR DETAILS:", err);
Â  Â  res
Â  Â  Â  .status(500)
Â  Â  Â  .json({ success: false, msg: "Server error. Please try again later." });
Â  }
};

// ==========================
// GET LOGGED-IN USER INFO
// ==========================
export const getMe = async (req, res) => {
  try {
    const user = await User.findById(req.user.id).select("-password");
    res.json({ success: true, user });
  } catch (err) {
    console.error(err.message);
    res.status(500).json({ msg: "Server Error" });
  }
};


